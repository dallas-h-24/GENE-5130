setwd("C:/Users/dalla/OneDrive/Documents/GitHub/Bioinformatics in R")
### Edit this line so your notebook renders properly
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/dalla/OneDrive/Documents/GitHub/Bioinformatics in R"))
### Edit this line so your notebook renders properly
knitr::opts_knit$set(root.dir = normalizePath("C:/Users/dalla/OneDrive/Documents/GitHub/Bioinformatics in R"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("WGCNA")
# We first need to import the important libnrary for today's class, dplyr
library(WGCNA)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute")
# We first need to import the important libnrary for today's class, dplyr
library(WGCNA)
BiocManager::install("preprocessCore")
# We first need to import the important libnrary for today's class, dplyr
library(WGCNA)
library(dplyr)
library(readr)
library(DESeq2)
library(ggplot2)
### Run this chunk to import the counts table and metadata into your evironment.
counts <- read.csv('GSE152418RawCounts.csv', header = TRUE, row.names = 1)
metadata <- read.csv('GSE152418Metadata.csv', header = TRUE, row.names = 1)
?goodSamplesGenes()
### It look at the boolean list, and use it to subset your dataset
goodSamplesGenes(metadata)
### It look at the boolean list, and use it to subset your dataset
gsG <- goodSamplesGenes(t(counts))
print(gsG)
#base r
subset_genes <- counts[gsG$goodGenes,]
good_counts <- subset_genes
### dplyr
#subset_samples <- gsG %>%
#  filter(goodGenes( == TRUE))
# Run this cell as it is, it is generatig artificial data
set.seed(123)
group1 <- matrix(rnorm(40, mean = 0), ncol = 2)
group2 <- matrix(rnorm(40, mean = 2.5), ncol = 2)
group3 <- matrix(rnorm(40, mean = 8), ncol = 2)
#sends to dataframe
data <- rbind(group1, group2, group3)
rownames(data) <- paste0("P", 1:nrow(data))
# Plot
df <- as.data.frame(data)
colnames(df) <- c("x", "y")
ggplot(df, aes(x, y)) +
geom_point() +
theme_minimal()
d <- dist(df, method = "euclidian", diag = FALSE, upper = FALSE, p = 2)
d <- dist(subset_genes, method = "euclidian", diag = FALSE, upper = FALSE, p = 2)
#base r
#subset_genes <- counts[gsG$goodGenes,]
subset_genes <- subset_genes(t(counts))
#base r
#subset_genes <- counts[gsG$goodGenes,]
subset_genes <- t(subset_genes)
d <- dist(subset_genes, method = "euclidian", diag = FALSE, upper = FALSE, p = 2)
### Write your code here
x <- hclust(d, method = "complete", members = NULL)
View(x)
View(counts)
#### REMOVE THIS
plot(x)
#?prcomp
?hclust
#?hclust
```
?prcomp
#?hclust
PCA <- prcomp(subset_genes)
View(PCA)
PCA$x
plot(PCA$x[,1], PCA$x[,2])
plot(PCA$x[,1])
ggplot(
data = PCA$x, aes(x= PC1, y =PC2)) + geom_point() +
geom_text(label = rownames(PCA$x))
### TO BE REMOVED
?dplyr
#Plot the scores of these first two PCS (stored in pca$x)
pca_plot <- ggplot(
data = PCA$x, aes(x= PC1, y =PC2)) + geom_point() +
geom_text(label = rownames(PCA$x))
#### REMOVE THIS
hclust_plot <- plot(x)
View(pca_plot)
#### REMOVE THIS
plot(x)
#Plot the scores of these first two PCS (stored in pca$x)
ggplot(
data = PCA$x, aes(x= PC1, y =PC2)) + geom_point() +
geom_text(label = rownames(PCA$x))
filtered_good_genes <- subset_genes %>%
select(-GSM4614995, -GSM4615000,-GSM4614993)
View(subset_genes)
filtered_good_genes <- subset_genes %>%
rows_delete(-GSM4614995, -GSM4615000,-GSM4614993)
filtered_good_genes <- subset_genes_df %>%
rows_delete(-GSM4614995, -GSM4615000,-GSM4614993)
subset_genes_df <- as.data.frame(subset_genes)
filtered_good_genes <- subset_genes_df %>%
rows_delete(-GSM4614995, -GSM4615000,-GSM4614993)
